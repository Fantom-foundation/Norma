// Code generated by MockGen. DO NOT EDIT.
// Source: pipeline.go

// Package monitoring is a generated GoMock package.
package monitoring

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWriterChain is a mock of WriterChain interface.
type MockWriterChain struct {
	ctrl     *gomock.Controller
	recorder *MockWriterChainMockRecorder
}

// MockWriterChainMockRecorder is the mock recorder for MockWriterChain.
type MockWriterChainMockRecorder struct {
	mock *MockWriterChain
}

// NewMockWriterChain creates a new mock instance.
func NewMockWriterChain(ctrl *gomock.Controller) *MockWriterChain {
	mock := &MockWriterChain{ctrl: ctrl}
	mock.recorder = &MockWriterChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriterChain) EXPECT() *MockWriterChainMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockWriterChain) Add(task func() error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", task)
}

// Add indicates an expected call of Add.
func (mr *MockWriterChainMockRecorder) Add(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockWriterChain)(nil).Add), task)
}

// Close mocks base method.
func (m *MockWriterChain) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWriterChainMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWriterChain)(nil).Close))
}

// Write mocks base method.
func (m *MockWriterChain) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockWriterChainMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriterChain)(nil).Write), p)
}
