// Code generated by MockGen. DO NOT EDIT.
// Source: prom_log_provider.go

// Package monitoring is a generated GoMock package.
package monitoring

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTimeLogListener is a mock of TimeLogListener interface.
type MockTimeLogListener struct {
	ctrl     *gomock.Controller
	recorder *MockTimeLogListenerMockRecorder
}

// MockTimeLogListenerMockRecorder is the mock recorder for MockTimeLogListener.
type MockTimeLogListenerMockRecorder struct {
	mock *MockTimeLogListener
}

// NewMockTimeLogListener creates a new mock instance.
func NewMockTimeLogListener(ctrl *gomock.Controller) *MockTimeLogListener {
	mock := &MockTimeLogListener{ctrl: ctrl}
	mock.recorder = &MockTimeLogListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeLogListener) EXPECT() *MockTimeLogListenerMockRecorder {
	return m.recorder
}

// OnLog mocks base method.
func (m *MockTimeLogListener) OnLog(node Node, timestamp Time, value float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnLog", node, timestamp, value)
}

// OnLog indicates an expected call of OnLog.
func (mr *MockTimeLogListenerMockRecorder) OnLog(node, timestamp, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnLog", reflect.TypeOf((*MockTimeLogListener)(nil).OnLog), node, timestamp, value)
}

// MockPrometheusLogProvider is a mock of PrometheusLogProvider interface.
type MockPrometheusLogProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPrometheusLogProviderMockRecorder
}

// MockPrometheusLogProviderMockRecorder is the mock recorder for MockPrometheusLogProvider.
type MockPrometheusLogProviderMockRecorder struct {
	mock *MockPrometheusLogProvider
}

// NewMockPrometheusLogProvider creates a new mock instance.
func NewMockPrometheusLogProvider(ctrl *gomock.Controller) *MockPrometheusLogProvider {
	mock := &MockPrometheusLogProvider{ctrl: ctrl}
	mock.recorder = &MockPrometheusLogProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrometheusLogProvider) EXPECT() *MockPrometheusLogProviderMockRecorder {
	return m.recorder
}

// RegisterLogListener mocks base method.
func (m *MockPrometheusLogProvider) RegisterLogListener(key PrometheusLogKey, listener TimeLogListener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterLogListener", key, listener)
}

// RegisterLogListener indicates an expected call of RegisterLogListener.
func (mr *MockPrometheusLogProviderMockRecorder) RegisterLogListener(key, listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterLogListener", reflect.TypeOf((*MockPrometheusLogProvider)(nil).RegisterLogListener), key, listener)
}

// Shutdown mocks base method.
func (m *MockPrometheusLogProvider) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockPrometheusLogProviderMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockPrometheusLogProvider)(nil).Shutdown))
}

// UnregisterLogListener mocks base method.
func (m *MockPrometheusLogProvider) UnregisterLogListener(key PrometheusLogKey, listener TimeLogListener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnregisterLogListener", key, listener)
}

// UnregisterLogListener indicates an expected call of UnregisterLogListener.
func (mr *MockPrometheusLogProviderMockRecorder) UnregisterLogListener(key, listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterLogListener", reflect.TypeOf((*MockPrometheusLogProvider)(nil).UnregisterLogListener), key, listener)
}
