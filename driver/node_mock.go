// Copyright 2024 Fantom Foundation
// This file is part of Norma System Testing Infrastructure for Sonic.
//
// Norma is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Norma is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Norma. If not, see <http://www.gnu.org/licenses/>.

// Code generated by MockGen. DO NOT EDIT.
// Source: node.go
//
// Generated by this command:
//
//	mockgen -source node.go -destination node_mock.go -package driver
//

// Package driver is a generated GoMock package.
package driver

import (
	io "io"
	reflect "reflect"

	network "github.com/Fantom-foundation/Norma/driver/network"
	rpc "github.com/Fantom-foundation/Norma/driver/rpc"
	gomock "go.uber.org/mock/gomock"
)

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
	isgomock struct{}
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// Cleanup mocks base method.
func (m *MockNode) Cleanup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockNodeMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockNode)(nil).Cleanup))
}

// DialRpc mocks base method.
func (m *MockNode) DialRpc() (rpc.RpcClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialRpc")
	ret0, _ := ret[0].(rpc.RpcClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialRpc indicates an expected call of DialRpc.
func (mr *MockNodeMockRecorder) DialRpc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialRpc", reflect.TypeOf((*MockNode)(nil).DialRpc))
}

// ExportEvents mocks base method.
func (m *MockNode) ExportEvents() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportEvents")
	ret0, _ := ret[0].(error)
	return ret0
}

// ExportEvents indicates an expected call of ExportEvents.
func (mr *MockNodeMockRecorder) ExportEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportEvents", reflect.TypeOf((*MockNode)(nil).ExportEvents))
}

// ExportGenesis mocks base method.
func (m *MockNode) ExportGenesis() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportGenesis")
	ret0, _ := ret[0].(error)
	return ret0
}

// ExportGenesis indicates an expected call of ExportGenesis.
func (mr *MockNodeMockRecorder) ExportGenesis() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportGenesis", reflect.TypeOf((*MockNode)(nil).ExportGenesis))
}

// GetLabel mocks base method.
func (m *MockNode) GetLabel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabel")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLabel indicates an expected call of GetLabel.
func (mr *MockNodeMockRecorder) GetLabel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabel", reflect.TypeOf((*MockNode)(nil).GetLabel))
}

// GetNodeID mocks base method.
func (m *MockNode) GetNodeID() (NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeID")
	ret0, _ := ret[0].(NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeID indicates an expected call of GetNodeID.
func (mr *MockNodeMockRecorder) GetNodeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeID", reflect.TypeOf((*MockNode)(nil).GetNodeID))
}

// GetServiceUrl mocks base method.
func (m *MockNode) GetServiceUrl(arg0 *network.ServiceDescription) *URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceUrl", arg0)
	ret0, _ := ret[0].(*URL)
	return ret0
}

// GetServiceUrl indicates an expected call of GetServiceUrl.
func (mr *MockNodeMockRecorder) GetServiceUrl(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceUrl", reflect.TypeOf((*MockNode)(nil).GetServiceUrl), arg0)
}

// Hostname mocks base method.
func (m *MockNode) Hostname() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hostname")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hostname indicates an expected call of Hostname.
func (mr *MockNodeMockRecorder) Hostname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hostname", reflect.TypeOf((*MockNode)(nil).Hostname))
}

// IsRunning mocks base method.
func (m *MockNode) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockNodeMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockNode)(nil).IsRunning))
}

// Kill mocks base method.
func (m *MockNode) Kill() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kill")
	ret0, _ := ret[0].(error)
	return ret0
}

// Kill indicates an expected call of Kill.
func (mr *MockNodeMockRecorder) Kill() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockNode)(nil).Kill))
}

// MetricsPort mocks base method.
func (m *MockNode) MetricsPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricsPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// MetricsPort indicates an expected call of MetricsPort.
func (mr *MockNodeMockRecorder) MetricsPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsPort", reflect.TypeOf((*MockNode)(nil).MetricsPort))
}

// RegisterListener mocks base method.
func (m *MockNode) RegisterListener(arg0 NodeListener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterListener", arg0)
}

// RegisterListener indicates an expected call of RegisterListener.
func (mr *MockNodeMockRecorder) RegisterListener(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterListener", reflect.TypeOf((*MockNode)(nil).RegisterListener), arg0)
}

// Stop mocks base method.
func (m *MockNode) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockNodeMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNode)(nil).Stop))
}

// StreamLog mocks base method.
func (m *MockNode) StreamLog() (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamLog")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamLog indicates an expected call of StreamLog.
func (mr *MockNodeMockRecorder) StreamLog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamLog", reflect.TypeOf((*MockNode)(nil).StreamLog))
}

// UnregisterListener mocks base method.
func (m *MockNode) UnregisterListener(arg0 NodeListener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnregisterListener", arg0)
}

// UnregisterListener indicates an expected call of UnregisterListener.
func (mr *MockNodeMockRecorder) UnregisterListener(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterListener", reflect.TypeOf((*MockNode)(nil).UnregisterListener), arg0)
}

// MockNodeListener is a mock of NodeListener interface.
type MockNodeListener struct {
	ctrl     *gomock.Controller
	recorder *MockNodeListenerMockRecorder
	isgomock struct{}
}

// MockNodeListenerMockRecorder is the mock recorder for MockNodeListener.
type MockNodeListenerMockRecorder struct {
	mock *MockNodeListener
}

// NewMockNodeListener creates a new mock instance.
func NewMockNodeListener(ctrl *gomock.Controller) *MockNodeListener {
	mock := &MockNodeListener{ctrl: ctrl}
	mock.recorder = &MockNodeListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeListener) EXPECT() *MockNodeListenerMockRecorder {
	return m.recorder
}

// AfterNodeStop mocks base method.
func (m *MockNodeListener) AfterNodeStop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterNodeStop")
}

// AfterNodeStop indicates an expected call of AfterNodeStop.
func (mr *MockNodeListenerMockRecorder) AfterNodeStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterNodeStop", reflect.TypeOf((*MockNodeListener)(nil).AfterNodeStop))
}
