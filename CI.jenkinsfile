// Norma CI test norma using "make test"

pipeline {
	agent { label 'norma' }

	options {
		timestamps ()
		timeout(time: 3, unit: 'HOURS')
		disableConcurrentBuilds(abortPrevious: true)
	}

	parameters {
		string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'NormaVersion')
	}

	environment {
		GOROOT = '/usr/local/go'
		DOCKER_API_VERSION = 1.45
	}

	stages {
		stage('Validate commit') {
			steps {
				script {
					def CHANGE_REPO = sh (script: "basename -s .git `git config --get remote.origin.url`", returnStdout: true).trim()
					build job: '/Utils/Validate-Git-Commit', parameters: [
						string(name: 'Repo', value: "${CHANGE_REPO}"),
						string(name: 'Branch', value: "${env.CHANGE_BRANCH}"),
						string(name: 'Commit', value: "${GIT_COMMIT}")
					]
				}
			}
		}

		stage('Clone Norma') {
			steps {
				script {
					currentBuild.description = 'Building on ${env.NODE_NAME}'
                		}
				checkout scmGit(
					branches: [[name: '${NormaVersion}']],
					userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Norma.git']]
				)
			}
		}

		stage('Check Norma Format') {
			steps {
				catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
					sh 'diff=`${GOROOT}/bin/gofmt -l . | grep -v "client"`; echo "$diff"; test -z "$diff"'
				}
			}
		}

		stage('Make Norma') {
			steps {
				sh 'make clean'
				sh 'git submodule update --init --recursive'
				sh 'make all'
			}
		}

		stage('Test Norma') {
			steps {
				sh 'make test'
			}
		}
	}
}
