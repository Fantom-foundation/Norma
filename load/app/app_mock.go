// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package app is a generated GoMock package.
package app

import (
	reflect "reflect"

	types "github.com/ethereum/go-ethereum/core/types"
	ethclient "github.com/ethereum/go-ethereum/ethclient"
	gomock "github.com/golang/mock/gomock"
)

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// CreateGenerator mocks base method.
func (m *MockApplication) CreateGenerator(rpcClient *ethclient.Client) (TransactionGenerator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenerator", rpcClient)
	ret0, _ := ret[0].(TransactionGenerator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenerator indicates an expected call of CreateGenerator.
func (mr *MockApplicationMockRecorder) CreateGenerator(rpcClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenerator", reflect.TypeOf((*MockApplication)(nil).CreateGenerator), rpcClient)
}

// WaitUntilGeneratorsCreated mocks base method.
func (m *MockApplication) WaitUntilApplicationIsDeployed(rpcClient *ethclient.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilApplicationIsDeployed", rpcClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilGeneratorsCreated indicates an expected call of WaitUntilGeneratorsCreated.
func (mr *MockApplicationMockRecorder) WaitUntilGeneratorsCreated(rpcClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilApplicationIsDeployed", reflect.TypeOf((*MockApplication)(nil).WaitUntilApplicationIsDeployed), rpcClient)
}

// MockTransactionGenerator is a mock of TransactionGenerator interface.
type MockTransactionGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionGeneratorMockRecorder
}

// MockTransactionGeneratorMockRecorder is the mock recorder for MockTransactionGenerator.
type MockTransactionGeneratorMockRecorder struct {
	mock *MockTransactionGenerator
}

// NewMockTransactionGenerator creates a new mock instance.
func NewMockTransactionGenerator(ctrl *gomock.Controller) *MockTransactionGenerator {
	mock := &MockTransactionGenerator{ctrl: ctrl}
	mock.recorder = &MockTransactionGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionGenerator) EXPECT() *MockTransactionGeneratorMockRecorder {
	return m.recorder
}

// GenerateTx mocks base method.
func (m *MockTransactionGenerator) GenerateTx() (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTx")
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTx indicates an expected call of GenerateTx.
func (mr *MockTransactionGeneratorMockRecorder) GenerateTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTx", reflect.TypeOf((*MockTransactionGenerator)(nil).GenerateTx))
}

// MockApplicationProvidingTxCount is a mock of ApplicationProvidingTxCount interface.
type MockApplicationProvidingTxCount struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationProvidingTxCountMockRecorder
}

// MockApplicationProvidingTxCountMockRecorder is the mock recorder for MockApplicationProvidingTxCount.
type MockApplicationProvidingTxCountMockRecorder struct {
	mock *MockApplicationProvidingTxCount
}

// NewMockApplicationProvidingTxCount creates a new mock instance.
func NewMockApplicationProvidingTxCount(ctrl *gomock.Controller) *MockApplicationProvidingTxCount {
	mock := &MockApplicationProvidingTxCount{ctrl: ctrl}
	mock.recorder = &MockApplicationProvidingTxCountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationProvidingTxCount) EXPECT() *MockApplicationProvidingTxCountMockRecorder {
	return m.recorder
}

// CreateGenerator mocks base method.
func (m *MockApplicationProvidingTxCount) CreateGenerator(rpcClient *ethclient.Client) (TransactionGenerator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenerator", rpcClient)
	ret0, _ := ret[0].(TransactionGenerator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenerator indicates an expected call of CreateGenerator.
func (mr *MockApplicationProvidingTxCountMockRecorder) CreateGenerator(rpcClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenerator", reflect.TypeOf((*MockApplicationProvidingTxCount)(nil).CreateGenerator), rpcClient)
}

// GetTransactionCounts mocks base method.
func (m *MockApplicationProvidingTxCount) GetTransactionCounts() (TransactionCounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionCounts")
	ret0, _ := ret[0].(TransactionCounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionCounts indicates an expected call of GetTransactionCounts.
func (mr *MockApplicationProvidingTxCountMockRecorder) GetTransactionCounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionCounts", reflect.TypeOf((*MockApplicationProvidingTxCount)(nil).GetTransactionCounts))
}

// WaitUntilGeneratorsCreated mocks base method.
func (m *MockApplicationProvidingTxCount) WaitUntilApplicationIsDeployed(rpcClient *ethclient.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilApplicationIsDeployed", rpcClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilGeneratorsCreated indicates an expected call of WaitUntilGeneratorsCreated.
func (mr *MockApplicationProvidingTxCountMockRecorder) WaitUntilGeneratorsCreated(rpcClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilApplicationIsDeployed", reflect.TypeOf((*MockApplicationProvidingTxCount)(nil).WaitUntilApplicationIsDeployed), rpcClient)
}
