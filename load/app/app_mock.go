// Copyright 2024 Fantom Foundation
// This file is part of Norma System Testing Infrastructure for Sonic.
//
// Norma is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Norma is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Norma. If not, see <http://www.gnu.org/licenses/>.

// Code generated by MockGen. DO NOT EDIT.
// Source: app.go
//
// Generated by this command:
//
//	mockgen -source app.go -destination app_mock.go -package app
//

// Package app is a generated GoMock package.
package app

import (
	reflect "reflect"

	rpc "github.com/Fantom-foundation/Norma/driver/rpc"
	gomock "go.uber.org/mock/gomock"
)

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// CreateUsers mocks base method.
func (m *MockApplication) CreateUsers(context AppContext, numUsers int) ([]User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsers", context, numUsers)
	ret0, _ := ret[0].([]User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsers indicates an expected call of CreateUsers.
func (mr *MockApplicationMockRecorder) CreateUsers(context, numUsers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsers", reflect.TypeOf((*MockApplication)(nil).CreateUsers), context, numUsers)
}

// GetReceivedTransactions mocks base method.
func (m *MockApplication) GetReceivedTransactions(rpcClient rpc.RpcClient) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceivedTransactions", rpcClient)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceivedTransactions indicates an expected call of GetReceivedTransactions.
func (mr *MockApplicationMockRecorder) GetReceivedTransactions(rpcClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceivedTransactions", reflect.TypeOf((*MockApplication)(nil).GetReceivedTransactions), rpcClient)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// GetTotalNumberOfSentTransactions mocks base method.
func (m *MockUser) GetTotalNumberOfSentTransactions() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalNumberOfSentTransactions")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetTotalNumberOfSentTransactions indicates an expected call of GetTotalNumberOfSentTransactions.
func (mr *MockUserMockRecorder) GetTotalNumberOfSentTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalNumberOfSentTransactions", reflect.TypeOf((*MockUser)(nil).GetTotalNumberOfSentTransactions))
}

// SendTransaction mocks base method.
func (m *MockUser) SendTransaction(rpcClient rpc.RpcClient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", rpcClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTransaction indicates an expected call of SendTransaction.
func (mr *MockUserMockRecorder) SendTransaction(rpcClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockUser)(nil).SendTransaction), rpcClient)
}
