// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package app is a generated GoMock package.
package app

import (
	reflect "reflect"

	rpc "github.com/Fantom-foundation/Norma/driver/rpc"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockApplication) CreateUser(rpcClient rpc.RpcClient) (User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", rpcClient)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockApplicationMockRecorder) CreateUser(rpcClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockApplication)(nil).CreateUser), rpcClient)
}

// GetReceivedTransactions mocks base method.
func (m *MockApplication) GetReceivedTransactions(rpcClient rpc.RpcClient) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceivedTransactions", rpcClient)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceivedTransactions indicates an expected call of GetReceivedTransactions.
func (mr *MockApplicationMockRecorder) GetReceivedTransactions(rpcClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceivedTransactions", reflect.TypeOf((*MockApplication)(nil).GetReceivedTransactions), rpcClient)
}

// WaitUntilApplicationIsDeployed mocks base method.
func (m *MockApplication) WaitUntilApplicationIsDeployed(rpcClient rpc.RpcClient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilApplicationIsDeployed", rpcClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilApplicationIsDeployed indicates an expected call of WaitUntilApplicationIsDeployed.
func (mr *MockApplicationMockRecorder) WaitUntilApplicationIsDeployed(rpcClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilApplicationIsDeployed", reflect.TypeOf((*MockApplication)(nil).WaitUntilApplicationIsDeployed), rpcClient)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// GenerateTx mocks base method.
func (m *MockUser) GenerateTx() (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTx")
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTx indicates an expected call of GenerateTx.
func (mr *MockUserMockRecorder) GenerateTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTx", reflect.TypeOf((*MockUser)(nil).GenerateTx))
}

// GetSentTransactions mocks base method.
func (m *MockUser) GetSentTransactions() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentTransactions")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetSentTransactions indicates an expected call of GetSentTransactions.
func (mr *MockUserMockRecorder) GetSentTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentTransactions", reflect.TypeOf((*MockUser)(nil).GetSentTransactions))
}
