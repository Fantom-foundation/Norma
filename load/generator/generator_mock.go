// Code generated by MockGen. DO NOT EDIT.
// Source: generator.go

// Package generator is a generated GoMock package.
package generator

import (
	reflect "reflect"

	ethclient "github.com/ethereum/go-ethereum/ethclient"
	gomock "github.com/golang/mock/gomock"
)

// MockTransactionGenerator is a mock of TransactionGenerator interface.
type MockTransactionGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionGeneratorMockRecorder
}

// MockTransactionGeneratorMockRecorder is the mock recorder for MockTransactionGenerator.
type MockTransactionGeneratorMockRecorder struct {
	mock *MockTransactionGenerator
}

// NewMockTransactionGenerator creates a new mock instance.
func NewMockTransactionGenerator(ctrl *gomock.Controller) *MockTransactionGenerator {
	mock := &MockTransactionGenerator{ctrl: ctrl}
	mock.recorder = &MockTransactionGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionGenerator) EXPECT() *MockTransactionGeneratorMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockTransactionGenerator) Init(client *ethclient.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", client)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockTransactionGeneratorMockRecorder) Init(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockTransactionGenerator)(nil).Init), client)
}

// SendTx mocks base method.
func (m *MockTransactionGenerator) SendTx() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTx")
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTx indicates an expected call of SendTx.
func (mr *MockTransactionGeneratorMockRecorder) SendTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTx", reflect.TypeOf((*MockTransactionGenerator)(nil).SendTx))
}
