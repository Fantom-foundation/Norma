// Code generated by MockGen. DO NOT EDIT.
// Source: generator.go

// Package generator is a generated GoMock package.
package generator

import (
	reflect "reflect"

	ethclient "github.com/ethereum/go-ethereum/ethclient"
	gomock "github.com/golang/mock/gomock"
)

// MockTransactionGenerator is a mock of TransactionGenerator interface.
type MockTransactionGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionGeneratorMockRecorder
}

// MockTransactionGeneratorMockRecorder is the mock recorder for MockTransactionGenerator.
type MockTransactionGeneratorMockRecorder struct {
	mock *MockTransactionGenerator
}

// NewMockTransactionGenerator creates a new mock instance.
func NewMockTransactionGenerator(ctrl *gomock.Controller) *MockTransactionGenerator {
	mock := &MockTransactionGenerator{ctrl: ctrl}
	mock.recorder = &MockTransactionGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionGenerator) EXPECT() *MockTransactionGeneratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTransactionGenerator) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTransactionGeneratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTransactionGenerator)(nil).Close))
}

// SendTx mocks base method.
func (m *MockTransactionGenerator) SendTx() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTx")
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTx indicates an expected call of SendTx.
func (mr *MockTransactionGeneratorMockRecorder) SendTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTx", reflect.TypeOf((*MockTransactionGenerator)(nil).SendTx))
}

// MockTransactionGeneratorFactory is a mock of TransactionGeneratorFactory interface.
type MockTransactionGeneratorFactory struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionGeneratorFactoryMockRecorder
}

// MockTransactionGeneratorFactoryMockRecorder is the mock recorder for MockTransactionGeneratorFactory.
type MockTransactionGeneratorFactoryMockRecorder struct {
	mock *MockTransactionGeneratorFactory
}

// NewMockTransactionGeneratorFactory creates a new mock instance.
func NewMockTransactionGeneratorFactory(ctrl *gomock.Controller) *MockTransactionGeneratorFactory {
	mock := &MockTransactionGeneratorFactory{ctrl: ctrl}
	mock.recorder = &MockTransactionGeneratorFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionGeneratorFactory) EXPECT() *MockTransactionGeneratorFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransactionGeneratorFactory) Create(rpcClient *ethclient.Client) (TransactionGenerator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", rpcClient)
	ret0, _ := ret[0].(TransactionGenerator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTransactionGeneratorFactoryMockRecorder) Create(rpcClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionGeneratorFactory)(nil).Create), rpcClient)
}
